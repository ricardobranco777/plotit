#!/usr/bin/python3
"""
PlotIt
"""

import argparse
import os
import sys
from concurrent.futures import ProcessPoolExecutor
from datetime import datetime

from pandas import read_csv
from matplotlib import pyplot

USAGE = f'''{sys.argv[0]} [-s|--separator FIELD_SEPARATOR] [-k|--kind line|bar|area]
   [-o|--output OUTPUT] [-d|--dir DIRECTORY]
   [-t|--type png|svg|pdf] FILES...'''


def unix2datetime(timestamp):
    """
    Convert Unix timestamp to datetime object
    """
    return datetime.fromtimestamp(int(timestamp))


def plot_file(filename, outfile=None):
    """
    Plot a CSV file using a space as delimiter with the format:
    NAME TIMESTAMP FLOAT_VALUE
    """
    try:
        series = read_csv(
            filename,
            delimiter=opts.separator,
            header=None,
            index_col=1,
            parse_dates=True,
            date_parser=unix2datetime)
        series.plot(
            title=os.path.basename(filename),
            kind=opts.kind)
    except (OSError, ValueError, TypeError) as err:
        print(f"ERROR: {err}: {filename}", file=sys.stderr)
        sys.exit(1)

    filename = outfile if outfile else filename

    try:
        pyplot.savefig(filename + "." + opts.type)
    except OSError as err:
        print(f"ERROR: {err}: {filename}", file=sys.stderr)
        sys.exit(1)


def parse_args():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser(usage=USAGE, add_help=False)
    parser.add_argument(
        '-d', '--dir')
    parser.add_argument(
        '-o', '--output')
    parser.add_argument(
        '-s', '--separator', default=' ')
    parser.add_argument(
        '-t', '--type', default='png', choices=['png', 'svg', 'pdf'])
    parser.add_argument(
        '-k', '--kind', default='line', choices=['line', 'bar', 'area'])
    parser.add_argument('files', nargs='+')
    return parser.parse_args()


def main():
    """
    Main function
    """
    if opts.output:
        if len(opts.files) == 1:
            plot_file(opts.files[0], opts.output)
        else:
            print("ERROR: Too many plots for a single output file", file=sys.stderr)
            sys.exit(1)
    elif opts.dir:
        out_files = [
            os.path.join(opts.dir, os.path.basename(f)) for f in opts.files
        ]
        with ProcessPoolExecutor() as executor:
            executor.map(plot_file, opts.files, out_files)
    else:
        with ProcessPoolExecutor() as executor:
            executor.map(plot_file, opts.files)


if __name__ == "__main__":
    opts = parse_args()
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
